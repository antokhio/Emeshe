
#define USUAL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy"
#define GEOMVEL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;COLOR0"

ByteAddressBuffer Geom1;
ByteAddressBuffer Geom2;

float normoffset = 12;
float texcdoffset = 24;
float prevposoffset = 32;
float strides = 48;
float Fade = 0;
float pFade = 0;

struct VsInUsual
{
	float4 cpoint : POSITION;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	uint vid : SV_VertexID;
	uint iid : SV_InstanceID;
};
struct VsInGeomvel
{   
	float3 cpoint : POSITION;
	float3 norm : NORMAL;
	float2 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
	uint vid : SV_VertexID;
};
struct VsOutGeomvel
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float2 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
};



VsOutGeomvel VSGeomvel(VsInGeomvel input)
{
    VsOutGeomvel output;
	
	// input.cpoint+
	uint ii = input.vid*strides;
    output.cpoint = float4(lerp(asfloat(Geom1.Load3(ii)),asfloat(Geom2.Load3(ii)),Fade),1);
	output.norm = lerp(asfloat(Geom1.Load3(ii+normoffset)),asfloat(Geom2.Load3(ii+normoffset)),Fade);
	output.TexCd = lerp(asfloat(Geom1.Load2(ii+texcdoffset)),asfloat(Geom2.Load2(ii+texcdoffset)),Fade);
	output.ppos = lerp(asfloat(Geom1.Load4(ii+prevposoffset)),asfloat(Geom2.Load4(ii+prevposoffset)),pFade);
	
    return output;
}
VsOutGeomvel VSUsual(VsInUsual input)
{
    VsOutGeomvel output;
	
	// input.cpoint+
	uint ii = input.vid*strides;
    output.cpoint = float4(lerp(asfloat(Geom1.Load3(ii)),asfloat(Geom2.Load3(ii)),Fade),1);
	output.norm = lerp(asfloat(Geom1.Load3(ii+normoffset)),asfloat(Geom2.Load3(ii+normoffset)),Fade);
	output.TexCd = lerp(asfloat(Geom1.Load2(ii+texcdoffset)),asfloat(Geom2.Load2(ii+texcdoffset)),Fade);
	output.ppos = float4(lerp(asfloat(Geom1.Load3(ii)),asfloat(Geom2.Load3(ii)),pFade),input.iid);
	
    return output;
}

[maxvertexcount(3)]
void GSGeomvel(triangle VsOutGeomvel input[3], inout TriangleStream<VsOutGeomvel>GSOut)
{
	VsOutGeomvel v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}

GeometryShader StreamGeomvel = ConstructGSWithSO( CompileShader( gs_5_0, GSGeomvel() ), GEOMVEL );

technique11 HasVelocity
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSGeomvel() ) );
		SetGeometryShader( CompileShader( gs_5_0, GSGeomvel() ) );
	    SetGeometryShader( StreamGeomvel );

	}
}
technique11 GenerateVelocity
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSUsual() ) );
		SetGeometryShader( CompileShader( gs_5_0, GSGeomvel() ) );
	    SetGeometryShader( StreamGeomvel );

	}
}
