
struct inbuf
{
	float3 position;
	float3 velocity;
	float difference;
};

StructuredBuffer<inbuf> FInput;

struct VS_IN
{   
	float3 cpoint : POSITION;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	uint vid : SV_VertexID;
};

struct VS_OUTPUT
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
};



VS_OUTPUT VS(VS_IN input)
{
    VS_OUTPUT output;
	
	// input.cpoint+
    output.cpoint = float4(FInput[input.vid].position,1);
	//output.cpoint = float4(input.cpoint,1);
	output.norm = input.norm;
	output.TexCd = float4(input.cpoint,1);
	
    return output;
}



[maxvertexcount(3)]
void GS(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT>GSOut)
{
	VS_OUTPUT v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ), "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy" );

technique11 MeshJoin
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}
