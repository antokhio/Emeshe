
#define USUAL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy"
#define GEOMVEL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;COLOR0"
#define SKINNING "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;BLENDINDICES;BLENDWEIGHT;COLOR0"

float CurveAmount = 1;
float pCurveAmount = 1;
float Factor = 1;

struct VSgvin
{
	float4 PosO : POSITION;
	float3 NormO : NORMAL;
	float2 TexCd : TEXCOORD0;
	float4 velocity : COLOR0;
	uint vid : SV_VertexID;
};

struct VSin
{
	float4 PosO : POSITION;
	float3 NormO : NORMAL;
	float2 TexCd : TEXCOORD0;
	uint vid : SV_VertexID;
};

struct vs2hs
{
    float4 PosW: POSITION;
	float4 TexCd: TEXCOORD0;
    float3 NormW: NORMAL;
};
struct vs2hsi
{
    float4 PosW: POSITION;
	float4 TexCd: TEXCOORD0;
    nointerpolation float ii: TEXCOORD1;
    float3 NormW: NORMAL;
    float4 vel : COLOR0;
};
struct hsconst
{
    float fTessFactor[3]    : SV_TessFactor ;
    float fInsideTessFactor : SV_InsideTessFactor ;
    float3 f3B210    : POSITION3 ;
    float3 f3B120    : POSITION4 ;
    float3 f3B021    : POSITION5 ;
    float3 f3B012    : POSITION6 ;
    float3 f3B102    : POSITION7 ;
    float3 f3B201    : POSITION8 ;
    float3 f3B111    : CENTER ;
    float3 f3N110    : NORMAL3 ;
    float3 f3N011    : NORMAL4 ;
    float3 f3N101    : NORMAL5 ;
};
struct hs2ds
{
    float4 PosW: POSITION;
	float4 TexCd: TEXCOORD0;
    float3 NormW: NORMAL;
};
struct hs2dsi
{
    float4 PosW: POSITION;
	float4 TexCd: TEXCOORD0;
    nointerpolation float ii: TEXCOORD1;
    float3 NormW: NORMAL;
    float4 vel : COLOR0;
};
struct ds2ps
{
    float4 PosWVP: SV_POSITION;
    float4 PosW: TEXCOORD2;
	float4 TexCd: TEXCOORD0;
    float3 NormW: NORMAL;
    float4 vel : COLOR0;
};
struct ds2psi
{
    float4 PosW: SV_POSITION;
	float4 TexCd: TEXCOORD0;
    float3 NormW: NORMAL;
    float4 vel : COLOR0;
};

vs2hsi VSi(VSgvin In)
{
    //inititalize all fields of output struct with 0
    vs2hsi Out = (vs2hsi)0;
	
	float4 dispPos = In.PosO;
	float3 dispNorm = In.NormO;
	
    Out.NormW = normalize(dispNorm);
	
    Out.PosW = dispPos;
	Out.vel = float4(In.velocity.xyz,1);
	Out.ii = In.velocity.w;
	
	//if(isTriPlanar) Out.TexCd = float4(TriPlanar(dispPos.xyz, dispNorm, tTex, TriPlanarPow),0,1);
	Out.TexCd = float4(In.TexCd,0,1);
	
    return Out;
}

/////////////////////
//////// HSC ////////
/////////////////////

hsconst HSCi( InputPatch<vs2hsi, 3> I )
{
    hsconst O = (hsconst)0;
	O.fTessFactor[0] = Factor;    
    O.fTessFactor[1] = Factor;    
    O.fTessFactor[2] = Factor;   
    O.fInsideTessFactor = ( O.fTessFactor[0] + O.fTessFactor[1] + O.fTessFactor[2] ) / 3.0f;  
		
    float3 f3B003 = I[0].PosW;
    float3 f3B030 = I[1].PosW;
    float3 f3B300 = I[2].PosW;
    // And Normals
    float3 f3N002 = I[0].NormW;
    float3 f3N020 = I[1].NormW;
    float3 f3N200 = I[2].NormW;

	O.f3B210 = ( ( 2.0f * f3B003 ) + f3B030 - ( dot( ( f3B030 - f3B003 ), f3N002 ) * f3N002 ) ) / 3.0f;
	O.f3B120 = ( ( 2.0f * f3B030 ) + f3B003 - ( dot( ( f3B003 - f3B030 ), f3N020 ) * f3N020 ) ) / 3.0f;
    O.f3B021 = ( ( 2.0f * f3B030 ) + f3B300 - ( dot( ( f3B300 - f3B030 ), f3N020 ) * f3N020 ) ) / 3.0f;
    O.f3B012 = ( ( 2.0f * f3B300 ) + f3B030 - ( dot( ( f3B030 - f3B300 ), f3N200 ) * f3N200 ) ) / 3.0f;
    O.f3B102 = ( ( 2.0f * f3B300 ) + f3B003 - ( dot( ( f3B003 - f3B300 ), f3N200 ) * f3N200 ) ) / 3.0f;
    O.f3B201 = ( ( 2.0f * f3B003 ) + f3B300 - ( dot( ( f3B300 - f3B003 ), f3N002 ) * f3N002 ) ) / 3.0f;

    float3 f3E = ( O.f3B210 + O.f3B120 + O.f3B021 + O.f3B012 + O.f3B102 + O.f3B201 ) / 6.0f;
    float3 f3V = ( f3B003 + f3B030 + f3B300 ) / 3.0f;
    O.f3B111 = f3E + ( ( f3E - f3V ) / 2.0f );
    
    float fV12 = 2.0f * dot( f3B030 - f3B003, f3N002 + f3N020 ) / dot( f3B030 - f3B003, f3B030 - f3B003 );
    O.f3N110 = normalize( f3N002 + f3N020 - fV12 * ( f3B030 - f3B003 ) );
    float fV23 = 2.0f * dot( f3B300 - f3B030, f3N020 + f3N200 ) / dot( f3B300 - f3B030, f3B300 - f3B030 );
    O.f3N011 = normalize( f3N020 + f3N200 - fV23 * ( f3B300 - f3B030 ) );
    float fV31 = 2.0f * dot( f3B003 - f3B300, f3N200 + f3N002 ) / dot( f3B003 - f3B300, f3B003 - f3B300 );
    O.f3N101 = normalize( f3N200 + f3N002 - fV31 * ( f3B003 - f3B300 ) );
    return O;
}

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[patchconstantfunc("HSCi")]
[outputcontrolpoints(3)]
hs2dsi HSi( InputPatch<vs2hsi, 3> I, uint uCPID : SV_OutputControlPointID )
{
    hs2dsi O = (hs2dsi)0;
    O.PosW = I[uCPID].PosW;
    O.NormW = I[uCPID].NormW; 
	O.TexCd = I[uCPID].TexCd;
	O.vel = I[uCPID].vel;
	O.ii = I[uCPID].ii;
	
    return O;
}

////////////////////
//////// DS ////////
////////////////////

[domain("tri")]
ds2psi DSi( hsconst HSConstantData, const OutputPatch<hs2dsi, 3> I, float3 f3BarycentricCoords : SV_DomainLocation )
{
    ds2psi O = (ds2psi)0;
	
	float ii = I[0].ii;
	
	// TexCoords

    float fU = f3BarycentricCoords.x;
    float fV = f3BarycentricCoords.y;
    float fW = f3BarycentricCoords.z;

    float fUU = fU * fU;
    float fVV = fV * fV;
    float fWW = fW * fW;
    float fUU3 = fUU * 3.0f;
    float fVV3 = fVV * 3.0f;
    float fWW3 = fWW * 3.0f;
    
    float3 f3Position = I[0].PosW.xyz * fWW * fW +
                        I[1].PosW.xyz * fUU * fU +
                        I[2].PosW.xyz * fVV * fV +
                        HSConstantData.f3B210 * fWW3 * fU +
                        HSConstantData.f3B120 * fW * fUU3 +
                        HSConstantData.f3B201 * fWW3 * fV +
                        HSConstantData.f3B021 * fUU3 * fV +
                        HSConstantData.f3B102 * fW * fVV3 +
                        HSConstantData.f3B012 * fU * fVV3 +
                        HSConstantData.f3B111 * 6.0f * fW * fU * fV;
	
    float3 pf3Position = I[0].vel.xyz * fWW * fW +
                        I[1].vel.xyz * fUU * fU +
                        I[2].vel.xyz * fVV * fV +
                        HSConstantData.f3B210 * fWW3 * fU +
                        HSConstantData.f3B120 * fW * fUU3 +
                        HSConstantData.f3B201 * fWW3 * fV +
                        HSConstantData.f3B021 * fUU3 * fV +
                        HSConstantData.f3B102 * fW * fVV3 +
                        HSConstantData.f3B012 * fU * fVV3 +
                        HSConstantData.f3B111 * 6.0f * fW * fU * fV;
	    
    float3 f3Normal =   I[0].NormW * fWW +
                        I[1].NormW * fUU +
                        I[2].NormW * fVV +
                        HSConstantData.f3N110 * fW * fU +
                        HSConstantData.f3N011 * fU * fV +
                        HSConstantData.f3N101 * fW * fV;
	
    float3 oPosition = I[0].PosW.xyz * fW +
                        I[1].PosW.xyz * fU +
                        I[2].PosW.xyz * fV;
    float3 poPosition = I[0].vel.xyz * fW +
                        I[1].vel.xyz * fU +
                        I[2].vel.xyz * fV;
	    
    float3 oNormal =   I[0].NormW * fWW +
                        I[1].NormW * fUU +
                        I[2].NormW * fVV;
	f3Position = lerp(oPosition,f3Position,CurveAmount);
	pf3Position = lerp(poPosition,pf3Position,pCurveAmount);
	f3Normal = lerp(oNormal,f3Normal,CurveAmount);
	
    // Normalize the interpolated normal    
    f3Normal = normalize( -f3Normal );
	
	float3 dispPos = f3Position;
	float3 dispNorm = f3Normal;
	float3 pdispPos = pf3Position;

    O.PosW = float4(dispPos,1);
	O.NormW = -normalize(dispNorm);
	
	O.TexCd = I[0].TexCd * fW + I[1].TexCd * fU + I[2].TexCd * fV;
	
	float3 pnpos = pdispPos;
	O.vel.xyz = pdispPos;
	O.vel.w = I[0].ii;
   
    return O;
}
[maxvertexcount(3)]
void GsGeomvel(triangle ds2psi input[3], inout TriangleStream<ds2psi>GSOut)
{
	ds2psi v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}
GeometryShader StreamGeomvel = ConstructGSWithSO( CompileShader( gs_5_0, GsGeomvel() ), GEOMVEL );
technique11 GeomvelLayout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSi() ) );
		SetHullShader( CompileShader( hs_5_0, HSi()) );
		SetDomainShader( CompileShader( ds_5_0, DSi() ) );
		SetGeometryShader( CompileShader( gs_5_0, GsGeomvel() ) );
	    SetGeometryShader( StreamGeomvel );

	}
}