Texture2D PrevTex: PREVIOUS;
Texture2D ColorTex: INITIAL;
Texture2DArray FakeShadMap <string uiname="Shadow Cubemap";>;

#define PI 3.14159265358979
#include "FakeCubeUtils.fxh"
#include "MRE.fxh"

float2 ScreenSize:TARGETSIZE;

StructuredBuffer<float2> SampleOffset;
int SampleOffsetCount = 1;

cbuffer controls:register(b0)
{
	float3 Position;
	float Softness = 1;
	float SoftnessSampAmount = 1;
	float SoftnessSampPower = 1;
	float SoftnessSampEpsilon = 1;
	float SoftnessSampCOffset = 0;
	float Bias = 0.009;
};

SamplerState s0 <string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=CLAMP;
	AddressV=CLAMP;
	AddressW=WRAP;
};

float4 pShad(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float3 clpos = Position;
	clpos.xz *= -1;
	float3 Gcurrpos = mre_getworldpos(s0,uv);
	Gcurrpos.xz *=-1;
	float3 GlDir = normalize(Gcurrpos-clpos);
	float GshadD = FakeShadMap.Sample(s0,FakeCubeCoord(GlDir)).x;
	float GcurrD = length(Gcurrpos-clpos);
	float Gshad = GcurrD-GshadD;
	float3 currpos = Gcurrpos;
	uint ActiveSampleCount = SampleOffsetCount;
	float shad = 0;
	float shadD = 0;
	for(uint i = 0; i<SampleOffsetCount; i++)
	{
		currpos = mre_getworldposLevel(s0,uv+SampleOffset[i]*GcurrD*(Softness*.001),0).xyz;
		currpos.xz *=-1;
		float gcD = length(currpos-Gcurrpos)+SoftnessSampCOffset;
		float epsilon = Softness*SoftnessSampEpsilon;
		if(gcD<epsilon)
		{
			float3 lDir = normalize(currpos-clpos);
			shadD = FakeShadMap.SampleLevel(s0,FakeCubeCoord(lDir),0).x;
			float currD = length(currpos-clpos);
			shad += pow(max(saturate(currD-shadD)*SoftnessSampAmount-Bias,0),SoftnessSampPower);
		}
		else if((i+1)!=SampleOffsetCount) ActiveSampleCount--;
	}
	float resShad = saturate(1-shad/ActiveSampleCount);
	return float4(resShad.xxx,1);
}

technique10 Point{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pShad()));}
}