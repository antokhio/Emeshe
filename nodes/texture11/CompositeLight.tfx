Texture2D InTex: PREVIOUS;
Texture2D Lights[5];

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Opacity = 1;
	float SpecMul = 0;
	float SSSMul = 0;
	float ComponentAmount[5] = {1,1,1,1,1};
};

float4 pMIX(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_TARGET{
	
    float4 incol = InTex.Sample(s0,uv);
	float4 col = 0;
	col.a = incol.a;
	float3 amb = Lights[0].Sample(s0,uv).rgb;
	float3 diff = Lights[1].Sample(s0,uv).rgb;
	float3 spec = Lights[2].Sample(s0,uv).rgb;
	float3 SSS = Lights[3].Sample(s0,uv).rgb;
	float3 rim = Lights[4].Sample(s0,uv).rgb;
	
	float3 Oamb = incol.rgb * amb;
	
	float3 Odiff = incol.rgb * diff;
	
	float3 Mspec = incol.rgb * spec;
	float3 Ospec = lerp(spec,Mspec,SpecMul);
	
	float3 MSSS = incol.rgb * SSS;
	float3 OSSS = lerp(SSS,MSSS,SSSMul);
	
	float3 Mrim = incol.rgb * rim;
	float3 Orim = lerp(rim,Mrim,SSSMul);
	
	col.rgb = Oamb * ComponentAmount[0];
	col.rgb += Odiff * ComponentAmount[1];
	col.rgb += Ospec * ComponentAmount[2];
	col.rgb += OSSS * ComponentAmount[3];
	col.rgb += Orim * ComponentAmount[4];
	
    return lerp(incol,col,Opacity);
}


technique10 Mix{pass P1{SetPixelShader(CompileShader(ps_4_0,pMIX()));}}
