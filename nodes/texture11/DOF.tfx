//textures
Texture2D texPrev: PREVIOUS;
Texture2D texColor: INITIAL;
float2 R:TARGETSIZE;

#include "../fxh/MRE.fxh"

float BlurAmount = 0;
float FocusDistance = 1;
StructuredBuffer<float> AutoFocus;
float2 FrgBkgMul = 1;
float2 FrgBkgPow = float2(1,1.5);
float2 FrgBkgOffs = 0;
float RemoveArtifacts = 1;
float RemArtRadius = 10;
float RemArtBrightBkg = 0;
float RemArtBrightFrg = 0.32;
float FOV = 10;
float lerpAF = 0;
float MaxBlur = 0.04;
float BrightBalance = 0;
StructuredBuffer<float2> BlurOffset;
int BlurOffsetCount = 1;

SamplerState sP <bool visible=false;string uiname="Sampler POSITION";>
{
	Filter=MIN_MAG_MIP_POINT;
	AddressU=Wrap;
	AddressV=Wrap;
	MipLODBias = 0;
};

SamplerState sL <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=Clamp;
	AddressV=Clamp;
	MipLODBias = 0;
};

Texture2D InputTexture: PREVIOUS;
Texture2D Foreground: PASSRESULT1;
Texture2D Background: PASSRESULT3;
Texture2D FrgProcessed: PASSRESULT4;
Texture2D BkgProcessed: PASSRESULT5;

float4 PS_MIPS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	return InputTexture.SampleLevel(sL,x,0);
}

//// Foreground

float4 PS_ForegroundCtrl(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float AF = AutoFocus[0];
	float realfocus = lerp(FocusDistance, AF, lerpAF);
	float3 ppos = mre_getviewpos(sL,uv);
    //float bckg0 = abs(ppos.z-realfocus);
	//bckg0 *= ((ppos.z-realfocus)<0) ? FrgBkgMul.y : FrgBkgMul.x;
	//bckg0 += max(-FrgBkgOffs.y,0);
    float frg0 = max(-1*(ppos.z-realfocus),0);
	frg0 *= ((ppos.z-realfocus)<0) ? FrgBkgMul.y : FrgBkgMul.x;
	frg0 += -FrgBkgOffs.x;
	//if(!(ppos.z==0))
	return float4(frg0.xxx*(FrgBkgPow.x/ppos.z), 1);
	//else return float4(0,0,0,1);
}
float4 q_frg(float2 x,float2 off,float v){return Foreground.SampleLevel(sL,x+off/R,v);}
float4 PS_Edge_Frg(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target
{
    float rad=max(RemArtRadius,0);
    float3 e=float3(1,-1,0)*rad;
    float v=log2(rad);
    float4 cx=q_frg(x,e.xy,v)+q_frg(x,e.xz,v)+q_frg(x,e.xx,v)-q_frg(x,e.yy,v)-q_frg(x,e.yz,v)-q_frg(x,e.yx,v);
    float4 cy=q_frg(x,e.yy,v)+q_frg(x,e.zy,v)+q_frg(x,e.xy,v)-q_frg(x,e.yx,v)-q_frg(x,e.zx,v)-q_frg(x,e.xx,v);
    float4 c=sqrt(cx*cx+cy*cy)*RemArtBrightFrg*pow(2,rad/max(R.x,R.y))/sqrt(saturate(rad)+.001);
	c.a=1;
    return max(c,Foreground.Sample(sL,x));
}

//// Background

float4 PS_BackgroundCtrl(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float AF = AutoFocus[0];
	float realfocus = lerp(FocusDistance, AF, lerpAF);
	float3 ppos = mre_getviewpos(sL,uv,0);
    float bckg0 = abs(ppos.z-realfocus);
	bckg0 *= ((ppos.z-realfocus)<0) ? FrgBkgMul.y : FrgBkgMul.x;
	bckg0 += -FrgBkgOffs.y;
    //float frg0 = max(-1*(ppos.z-realfocus),0);
	//frg0 *= ((ppos.z-realfocus)<0) ? FrgBkgMul.y : FrgBkgMul.x;
	//frg0 += max(-FrgBkgOffs.x,0);
	return float4(bckg0.xxx*(FrgBkgPow.y/realfocus), 1);
}
float4 q_bkg(float2 x,float2 off,float v){return Background.SampleLevel(sL,x+off/R,v);}
float4 PS_Edge_Bkg(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target
{
    float rad=max(RemArtRadius,0);
    float3 e=float3(1,-1,0)*rad;
    float v=log2(rad);
    float4 cx=q_bkg(x,e.xy,v)+q_bkg(x,e.xz,v)+q_bkg(x,e.xx,v)-q_bkg(x,e.yy,v)-q_bkg(x,e.yz,v)-q_bkg(x,e.yx,v);
    float4 cy=q_bkg(x,e.yy,v)+q_bkg(x,e.zy,v)+q_bkg(x,e.xy,v)-q_bkg(x,e.yx,v)-q_bkg(x,e.zx,v)-q_bkg(x,e.xx,v);
    float4 c=sqrt(cx*cx+cy*cy)*RemArtBrightBkg*pow(2,rad/max(R.x,R.y))/sqrt(saturate(rad)+.001);
	c.a=1;
    return min(1-c,Background.Sample(sL,x));
}

//// Blur

float4 texControl(float2 x){return max(FrgProcessed.Sample(sL,x),BkgProcessed.Sample(sL,x));}
float4 PS_BufCtrlBlur(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target
{
	float4 col = texColor.Sample(sL, x);
	float4 orig = col;
	float4 ctrl = texControl(x);
	float ml = (MaxBlur==0) ? (BlurAmount * ctrl.x) : min(MaxBlur, BlurAmount * ctrl.x);
	
	col.rgb = 0;
	for (float i = 0; i<BlurOffsetCount; i++)
	{
		col.rgb += texColor.Sample(sL, x + BlurOffset[i] * ml * float2(1,R.x/R.y)).rgb/BlurOffsetCount;
	}
	return float4(col.rgb,1);
}

technique10 DOF{
	pass P0
	{SetPixelShader(CompileShader(ps_5_0,PS_ForegroundCtrl()));}
	//pass P1 <bool mips=true;>
	//{SetPixelShader(CompileShader(ps_5_0,PS_MIPS()));}
	//pass P2
	//{SetPixelShader(CompileShader(ps_5_0,PS_BackgroundCtrl()));}
	//pass P3 <bool mips=true;>
	//{SetPixelShader(CompileShader(ps_5_0,PS_MIPS()));}
	//pass P4
	//{SetPixelShader(CompileShader(ps_5_0,PS_Edge_Frg()));}
	//pass P5
	//{SetPixelShader(CompileShader(ps_5_0,PS_Edge_Bkg()));}
	//pass P6
	//{SetPixelShader(CompileShader(ps_5_0,PS_BufCtrlBlur()));}
}