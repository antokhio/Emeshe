Texture2D PrevTex: PREVIOUS;
Texture2D ColorTex: INITIAL;

#define PI 3.14159265358979
#include "../fxh/MRE.fxh"

float2 ScreenSize:TARGETSIZE;

cbuffer controls:register(b0){
	float SampleRadius = 0.05;
	float Intensity = 1;
	float Scale = 1;
	float Bias = 0.06;
	float SelfOcclusion = 0;
	float Blur = 1;
	//float FOV = 0;
	//float farval = 100;
};

SamplerState s0 <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_POINT;
	AddressU=WRAP;
	AddressV=WRAP;
	MipLODBias = -1;
};
/*
float CorrectRad()
{
	float fovtang = tan(PI*FOV);
	if(fovtang!=0) return 1/fovtang;
	else return 1;
}
*/
float3 getPosition(in float2 uv)
{
	float3 poso = GetViewPos(s0, uv);
	//if((poso.x == 0) && (poso.y == 0) && (poso.z == 0)) poso = float3(uv,farval);
	//return poso + (NoiseTex.Sample(s0, uv).xyz - .5) * NoiseAmount;
	return poso;
}

float3 getNormal(in float2 uv)
{
	float3 normo = Normals.Sample(s0, uv).xyz;
	return normo;
}

float getRandom(in float2 uv)
{	return ((frac(uv.x * (ScreenSize.x/2.0))*0.25)+(frac(uv.y*(ScreenSize.y/2.0))*0.5));	}

float doAmbientOcclusion(in float2 tcoord,in float2 uv, in float3 p, in float3 cnorm)
{
  float3 diff = getPosition(tcoord + uv) - p;
  const float3 v = normalize(diff);
  const float  d = length(diff)*Scale;
  return max(0.0-SelfOcclusion,dot(cnorm,v)-Bias)*(1.0/(1.0+d*d))*Intensity;
}

float4 SSAO(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float2 InvScreenSize = 1/ScreenSize;
	uv.x += InvScreenSize.x;
	uv.y -= InvScreenSize.y;
  const float3 vec[14] = {float3(1,1,-1),float3(1,-1,-1),
                         float3(1,1,1),float3(1,-1,1),
                         float3(-1,1,-1),float3(-1,-1,-1),
                         float3(-1,1,1),float3(-1,-1,1),

                         float3(1,0,0),float3(-1,0,0),
                         float3(0,1,0),float3(0,-1,0),
                         float3(0,0,1),float3(0,0,-1),
                       };

  float4 o = float4(0.0,0.0,0.0,1.0);
  float3 p = getPosition(uv);
  float3 n = getNormal(uv);
  float rand = getRandom(uv);

  float ao = 0.0;
  //float rad = (SampleRadius * CorrectRad())/p.z;
  float rad = SampleRadius;
  //**SSAO Calculation**//

  for (int j = 0; j < 14; ++j)
  {
    float3 coord = vec[j]*rad*rand;
    coord.y = ScreenSize.y-coord.y;
    ao += doAmbientOcclusion(uv,coord*InvScreenSize*2000.0, p, n )/2;
  }
  for (int j = 0; j < 14; ++j)
  {
    float3 coord = vec[j]*rad*.5*rand;
    coord.y = ScreenSize.y-coord.y;
    ao += doAmbientOcclusion(uv,coord*InvScreenSize*2000.0, p, n )/2;
  }
  ao/=8;
  ao+=SelfOcclusion;

  o.rgb = ao;
  //**END**//
  return o;
}
float4 SSAOBlur(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0): SV_Target
{
	float2 InvScreenSize = 1/ScreenSize;
  float4 o = 1;
  const float2 vec[3] = {
   float2(1,1),
   float2(1,0),
   float2(0,1),
   };

  float4 n = float4(getNormal(uv),1);

  float3 ao = PrevTex.Sample(s0,uv).xyz;
  int samples = 1;
  for (int k=0;k<3;k++){
     float2 tcoord = uv+float2(vec[k].x*InvScreenSize.x*Blur,vec[k].y*InvScreenSize.y*Blur);
     ao+=PrevTex.Sample(s0,tcoord).xyz;
     samples++;
  }
  ao/=samples;

  o.rgb *= 1-(saturate(ao)*n.a);

  return o;
}

float4 pMUL(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	return float4(PrevTex.Sample(s0,x).rgb * ColorTex.Sample(s0,x).rgb,ColorTex.Sample(s0,x).a);
}

technique10 SSAOt{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,SSAO()));}
	pass P1
	{SetPixelShader(CompileShader(ps_4_0,SSAOBlur()));}
	pass P2
	{SetPixelShader(CompileShader(ps_4_0,pMUL()));}
}