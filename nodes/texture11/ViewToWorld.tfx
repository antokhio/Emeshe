Texture2D tex0: PREVIOUS;
float2 R:TARGETSIZE;

cbuffer controls:register(b0)
{
	float4x4 ViewInverse;
	float4x4 ProjectionInverse;
	float4x4 Projection;
	float4x4 View;
	float4x4 PostWorldNormalTr;
	float4x4 PostViewNormalTr;
	float3 posCam;
};

SamplerState s0 <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=CLAMP;
	AddressV=CLAMP;
};

float4 PosV(Texture2D tex, SamplerState s, float2 uv)
{
	float4 p=float4(-1.0+2.0*uv.x,-1.0+2.0*uv.y,-1.0+2.0*tex.Sample(s,uv).x,1.0);
	p.y*=-1.0;
	p=mul(p,ProjectionInverse);
	p=float4(p.xyz*2.0/p.w,1.0);
	return p;
}
float4 PosW(Texture2D tex, SamplerState s,float2 uv)
{
	return mul(PosV(tex,s0,uv),ViewInverse);
}
float4 NorW(Texture2D tex, SamplerState s,float2 uv)
{
	float3 w0=PosW(tex,s0,uv).xyz;
	float3 w1=PosW(tex,s0,uv-float2(1,0)/R).xyz;
	float3 w2=PosW(tex,s0,uv-float2(0,1)/R).xyz;
	float3 NorW=normalize(cross(normalize(w1-w0),normalize(w2-w0)));
	return float4(NorW,1);
}
float4 NorV(Texture2D tex, SamplerState s,float2 uv)
{
	return mul(NorW(tex,s0,uv).xyz,View);
}
float4 pPOS_WORLD(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_TARGET{
    float4 c=float4(PosW(tex0,s0,uv).xyz,1);
    return c;
}
float4 pNOR_VIEW(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_TARGET{
	float4 c=float4(mul(NorV(tex0,s0,uv).xyz,PostViewNormalTr).xyz,1);
    return c;
}
float4 pPOS_VIEW(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_TARGET{
	float4 c=float4(PosV(tex0,s0,uv).xyz,1);
    return c;
}
float4 pNOR_WORLD(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_TARGET{
	float4 c=float4(mul(NorW(tex0,s0,uv).xyz,PostWorldNormalTr).xyz,1);
    return c;
}

technique10 WorldPosition
{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pPOS_WORLD()));}
}
technique10 ViewPosition
{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pPOS_VIEW()));}
}
technique10 WorldNormal
{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pNOR_WORLD()));}
}
technique10 ViewNormal
{
	pass P0 <string format="R16G16B16A16_Float";>
	{SetPixelShader(CompileShader(ps_4_0,pNOR_VIEW()));}
}


